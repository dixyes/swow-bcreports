name: tests

on:
  schedule: 
    - cron: "42 3 * * *"
  workflow_dispatch:
    inputs:
      swow_ref:
        description: 'Using Swow git ref'
        required: true
        default: 'ci'
      phpbc_ref:
        description: 'Using PHPbc git ref'
        required: false
        default: ''

jobs:
  get-swowref:
    name: Check if Swow have not tested
    outputs:
      refhash: ${{steps.gethash.outputs.refhash}}
      ok: ${{steps.check.outputs.ok}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Swow
        uses: actions/checkout@v2
        with:
          ref: "${{ github.event.inputs && github.event.inputs.swow_ref || 'ci' }}"
          repository: swow/swow
          path: swow
      - name: Get Swow ref hash
        id: gethash
        shell: bash
        working-directory: swow
        run: |
          swow_ref=`git rev-parse HEAD`
          echo "::set-output name=refhash::${swow_ref}"
      - name: Checkout bcreports
        uses: actions/checkout@v2
        with:
          path: report
      - name: Check if we have not tested
        id: check
        shell: bash
        working-directory: report
        run: |
          swow_ref="${{ steps.gethash.outputs.refhash }}"
          swow_ref_tail=${swow_ref##??}
          swow_ref_head=${swow_ref%%${swow_ref_tail}}

          ok="yes"

          [ -d "Windows/${swow_ref_head}/${swow_ref_tail}" ] && ok="no"
          [ -d "Linux/${swow_ref_head}/${swow_ref_tail}" ] && ok="no"
          [ -d "macOS/${swow_ref_head}/${swow_ref_tail}" ] && ok="no"
          echo "$ok"
          echo "::set-output name=ok::${ok}"
  unix-test:
    needs: get-swowref
    if: needs.get-swowref.outputs.ok == 'yes' || github.event_name == 'workflow_dispatch'
    #if: "false"
    name: Swow bc at ${{ matrix.os }} PHP ${{ matrix.phpver }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        #os: ["ubuntu-latest"]
        phpver: ["7.3", "7.4", "8.0"]
        #phpver: ["7.4"]
      max-parallel: 6
    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.phpver }}
          coverage: none
          extensions: curl,openssl
      - name: Checkout Swow
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-swowref.outputs.refhash }}
          repository: swow/swow
          path: swow
      - name: Setup extension dependencies
        run: |
          if [ ${{ runner.os }} = 'Linux' ]
          then
            sudo apt-get update
            sudo apt-get install -yqq libcurl4-openssl-dev
          fi
      - name: Build Swow extension
        run: |
          cd swow/ext
          printf "::group::\033[1mRun phpize\033[0m\n"
          phpize
          printf "::group::\033[1mStart configure\033[0m\n"
          ./configure --enable-swow\
            --enable-swow-debug \
            --enable-swow-ssl=${{ runner.os == 'Linux' && 'yes' || '/usr/local/opt/openssl' }} \
            --enable-swow-curl=${{ runner.os == 'Linux' && 'yes' || '/usr/local/opt/curl' }}
          printf "::group::\033[1mStart build Swow\033[0m\n"
          make -j`${{ runner.os == 'Linux' && 'nproc' || 'sysctl -n hw.logicalcpu' }}`
          printf "::group::\033[1mDone build Swow\033[0m\n"
          php -n -d extension=.libs/swow.so --ri swow
          printf "::group::\033[1mInstall Swow\033[0m\n"
          ${{ runner.os == 'Linux' && 'sudo' || ''}} make install-modules
      - name: Prepare mysql
        shell: bash
        run: |
          ${{ 'macOS' == runner.os && 'brew install mysql' || ''}}
          echo " ::group::Generate config file"
          mkdir -p /tmp/mysql/ctrl/data
          cat > /tmp/mysql/ctrl/my.cnf <<EOF
          [mysqld]
          mysqlx=0
          pid_file=/tmp/mysql/ctrl/mysqld.pid
          socket=/tmp/mysql/ctrl/mysqld.sock
          datadir=/tmp/mysql/ctrl/data
          bind-address=127.0.0.1
          port=3406
          symbolic-links=0
          server-id=1
          log_bin=somebinlog
          binlog_checksum=NONE
          binlog_format=ROW
          ${{ matrix.phpver == '7.3' && 'default_authentication_plugin=mysql_native_password' || ''}}
          EOF
          mkdir -p /tmp/mysql/expr/data
          cat > /tmp/mysql/expr/my.cnf <<EOF
          [mysqld]
          mysqlx=0
          pid_file=/tmp/mysql/expr/mysqld.pid
          socket=/tmp/mysql/expr/mysqld.sock
          datadir=/tmp/mysql/expr/data
          bind-address=127.0.0.1
          port=3506
          symbolic-links=0
          server-id=1
          log_bin=somebinlog
          binlog_checksum=NONE
          binlog_format=ROW
          ${{ matrix.phpver == '7.3' && 'default_authentication_plugin=mysql_native_password' || ''}}
          EOF
      - name: Run mysql server
        shell: bash
        run: |
          echo "::group::Initialize database"
          mysqld "--defaults-file=/tmp/mysql/ctrl/my.cnf" --initialize-insecure
          mysqld "--defaults-file=/tmp/mysql/expr/my.cnf" --initialize-insecure
          echo "::group::Start daemon"
          mysqld "--defaults-file=/tmp/mysql/ctrl/my.cnf" --daemonize --log_error=error.log || echo Failed start daemon >&2
          cat /tmp/mysql/ctrl/data/error.log
          mysqld "--defaults-file=/tmp/mysql/expr/my.cnf" --daemonize --log_error=error.log || echo Failed start daemon >&2
          cat /tmp/mysql/expr/data/error.log
          echo "::group::Create test database"
          mysql --host=127.0.0.1 --port=3406 -u root -e "CREATE DATABASE test;"
          mysql --host=127.0.0.1 --port=3506 -u root -e "CREATE DATABASE test;"
      - name: Checkout phpbc
        uses: actions/checkout@v2
        with:
          repository: dixyes/phpbc
          path: phpbc
          ref: ${{ github.event.inputs && github.event.inputs.phpbc_ref || 'master' }}
      - name: Test use actions
        uses: ./phpbc/action
        with:
          skip: Zend/tests/arginfo_zpp_mismatch.*
          #skip: sapi/.*,Zend/.*,ext/.*
          expr_args: -d extension=swow
          ctrl_env: MYSQL_TEST_HOST=localhost:3406,MYSQL_TEST_PORT=3406,PDO_MYSQL_TEST_DSN=mysql:host=127.0.0.1;port=3406;dbname=test,PDO_MYSQL_TEST_USER=root
          expr_env: MYSQL_TEST_HOST=localhost:3506,MYSQL_TEST_PORT=3506,PDO_MYSQL_TEST_DSN=mysql:host=127.0.0.1;port=3506;dbname=test,PDO_MYSQL_TEST_USER=root
      - name: Prepare artifact
        shell: bash
        id: prepareartifact
        run: |
          swow_ref="${{ needs.get-swowref.outputs.refhash }}"
          swow_ref_tail=${swow_ref##??}
          swow_ref_head=${swow_ref%%${swow_ref_tail}}
          echo "::set-output name=key::${swow_ref}-${{ matrix.phpver }}"
          mkdir report
          cd report
          mkdir -p ${{runner.os}}/${swow_ref_head}/${swow_ref_tail}
          cp ../phpbc_results.json ${{runner.os}}/${swow_ref_head}/${swow_ref_tail}/PHP${{ matrix.phpver }}.json
          cp ../phpbc_results.md ${{runner.os}}/${swow_ref_head}/${swow_ref_tail}/PHP${{ matrix.phpver }}.md
          cp ../phpbc_results.md ${{runner.os}}_PHP${{ matrix.phpver }}_latest.md

      - name: 'Upload test result'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.get-swowref.outputs.refhash }}
          path: report/**
          retention-days: 1
  win-test:
    needs: get-swowref
    if: needs.get-swowref.outputs.ok == 'yes' || github.event_name == 'workflow_dispatch'
    name: Swow bc at ${{ matrix.os }} PHP ${{ matrix.phpver }} ${{ matrix.ts == '1' && 'ts' || 'nts' }}
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        arch: ["x64"]
        os: ['windows-latest', 'windows-2016']
        #os: ['windows-latest']
        phpver: ['8.0', '7.4', '7.3']
        #phpver: ['8.0']
        ts: [ '0', '1' ]
        #ts: [ '0']
        exclude:
          - os: windows-latest
            phpver: "7.4"
          - os: windows-latest
            phpver: "7.3"
          - os: windows-2016
            phpver: "8.0"
          - os: windows-2016
            phpver: "8.1"
      max-parallel: 6
    env:
      deps: openssl,libcurl,zlib,libssh2,nghttp2
      tools_path: C:\tools\phpdev
      UNIX_COLOR: "1"
    steps:
      - name: Checkout Swow
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-swowref.outputs.refhash }}
          repository: swow/swow
          path: swow
      - name: Prepare caches
        id: cacheprepare
        working-directory: swow
        run: |
          . "./.github/workflows/winext/utils.ps1" -ToolName "cacheprepare" -MaxTry 3
          $os = "${{ matrix.os }}"
          if($os.Equals("windows-latest") -Or $os.Equals("windows-2019")){
            $PhpVCVer = "VS16"
          }elseif($os.Equals("windows-2016")){
            $PhpVCVer = "VC15"
          }
          function phpsdkver{
            $headers = @{
              "accept"="application/vnd.github.v3+json";
              "content-type"="application/json";
              "authorization"="Bearer ${{ secrets.GITHUB_TOKEN }}";
            }
            $info = fetchjson -Uri "https://api.github.com/repos/microsoft/php-sdk-binary-tools/git/ref/heads/master" -Headers $headers
            if(!$info){
              warn "Cannot fetch php-sdk-binary-tools info from api.github.com"
            }else{
              $ver = $info."object"."sha"
              Write-Host "::set-output name=phpsdkver::$ver"
            }
          }
          info "Using $PhpVCVer"
          $ret = 1
          phpsdkver
          ./.github/workflows/winext/getphp.ps1 `
            -PhpVer ${{ matrix.phpver }} `
            -PhpArch ${{ matrix.arch }} `
            -PhpVCVer $PhpVCVer `
            -PhpTs ${{ matrix.ts }} `
            -DryRun 1 &&
          ./.github/workflows/winext/devpack.ps1 `
            -PhpVer ${{ matrix.phpver }} `
            -PhpArch ${{ matrix.arch }} `
            -PhpVCVer $PhpVCVer `
            -PhpTs ${{ matrix.ts }} `
            -DryRun 1 &&
          ./.github/workflows/winext/deps.ps1 `
            ${{ env.deps }} `
            -DryRun 1 &&
          ($ret = 0 | Out-Null)
          exit $ret
      - name: Cache build environments
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.tools_path }}\php-sdk-binary-tools
            ${{ env.tools_path }}\deps\*.zip
            ${{ env.tools_path }}\*.zip
          key: buildenv-v1-${{ matrix.arch }}-${{ matrix.ts }}-${{ steps.cacheprepare.outputs.phpver }}-${{ steps.cacheprepare.outputs.devpackver }}-${{ steps.cacheprepare.outputs.downloadeddeps }}-${{ steps.cacheprepare.outputs.phpsdkver }}
      - name: Build Swow extension
        id: ext-build
        uses: ./swow/.github/workflows/winext
        with:
          ext-path: ./swow/ext
          tools-path: ${{ env.tools_path }}
          ext-name: swow
          deps: ${{ env.deps }}
          phpver: ${{ matrix.phpver }}
          phpts: ${{ matrix.ts }}
          phparch: ${{ matrix.arch }}
          install: "0"
          conf-args: "--enable-swow-ssl --enable-swow-curl"
          fix-pickle: 1
      - name: Install PHP and Swow extension
        shell: powershell
        working-directory: ./swow
        run: |
          Write-Host "::group::Fetching php from windows.php.net"
          .\.github\workflows\winext\getphp.ps1 `
            -PhpVer "${{ matrix.phpver }}" `
            -PhpVCVer "${{ steps.ext-build.outputs.vcver }}" `
            -PhpTs ${{ matrix.ts }}
          $ret = $lastexitcode
          Write-Host "::endgroup::"
          if( 0 -Ne $ret ){
              exit 1
          }
          Write-Host "::group::Copy extension to install dir"
          Copy-Item ext\${{ matrix.arch }}\Release${{ matrix.ts == '1' && '_TS' || '' }}\php_swow.dll ${{ env.tools_path }}\php\ext\
          Write-Host "::group::Generate php.ini to enable zend opcache"
          "extension_dir=${{ env.tools_path }}\php\ext
          zend_extension=opcache
          extension=bz2
          extension=com_dotnet
          ;extension=curl
          extension=dba
          extension=enchant
          extension=exif
          ${{  matrix.phpver != '7.3' && 'extension=ffi' || '' }}
          extension=fileinfo
          extension=ftp
          extension=${{ matrix.phpver == '8.0' && 'gd' || 'gd2' }}
          extension=gettext
          extension=gmp
          extension=intl
          extension=mbstring
          extension=mysqli
          extension=openssl
          extension=pdo_mysql
          extension=pgsql
          extension=shmop
          extension=sockets
          extension=sodium
          extension=sysvshm
          extension=soap
          extension=tidy
          ${{ matrix.phpver != '8.0' && 'extension=xmlrpc' || '' }}
          extension=xsl
          ;opcache.jit=disable
          " | Out-File -Encoding utf8 -Append ${{ env.tools_path }}\php\php.ini
      - name: Prepare mysql
        shell: bash
        run: |
          echo " ::group::Generate config file"
          mkdir -p C:/mysql/ctrl/data
          cat > C:/mysql/ctrl/my.cnf <<EOF
          [mysqld]
          pid_file=C:/mysql/ctrl/mysqld.pid
          socket=C:/mysql/ctrl/mysqld.sock
          datadir=C:/mysql/ctrl/data
          bind-address=127.0.0.1
          port=3406
          symbolic-links=0
          server-id=1
          log_bin=somebinlog
          binlog_checksum=NONE
          binlog_format=ROW
          ${{ matrix.phpver == '7.3' && 'default_authentication_plugin=mysql_native_password' || ''}}
          EOF
          mkdir -p C:/mysql/expr/data
          cat > C:/mysql/expr/my.cnf <<EOF
          [mysqld]
          pid_file=C:/mysql/expr/mysqld.pid
          socket=C:/mysql/expr/mysqld.sock
          datadir=C:/mysql/expr/data
          bind-address=127.0.0.1
          port=3506
          symbolic-links=0
          server-id=1
          log_bin=somebinlog
          binlog_checksum=NONE
          binlog_format=ROW
          ${{ matrix.phpver == '7.3' && 'default_authentication_plugin=mysql_native_password' || ''}}
          EOF
      - name: Run mysql server
        shell: powershell
        run: |
          Write-Host "::group::Initialize database"
          & mysqld "--defaults-file=C:/mysql/ctrl/my.cnf" --initialize-insecure --console
          & mysqld "--defaults-file=C:/mysql/expr/my.cnf" --initialize-insecure --console
          Write-Host "::group::Start daemon"
          Start-Process "mysqld.exe" -ArgumentList "--defaults-file=C:/mysql/ctrl/my.cnf --log_error=error.log"
          Start-Process "mysqld.exe" -ArgumentList "--defaults-file=C:/mysql/expr/my.cnf --log_error=error.log"
          Write-Host "::group::Create test database"
          $done = $false
          for($i=0; $i -Lt 5; $i++){
            Write-Host "Waiting for ctrl mysql start"
            try{
              & mysql --host=127.0.0.1 --port=3406 -u root -e "CREATE DATABASE test;" 2>&1
              $done = $true
              break
            }catch{
              Write-Host $_
              continue
            }finally{
              Start-Sleep -Seconds 2
            }
          }
          if(-Not $done){
            exit 1
          }
          $done = $false
          for($i=0; $i -Lt 5; $i++){
            Write-Host "Waiting for expr mysql start"
            try{
              & mysql --host=127.0.0.1 --port=3506 -u root -e "CREATE DATABASE test;" 2>&1
              $done = $true
              break
            }catch{
              Write-Host $_
              continue
            }finally{
              Start-Sleep -Seconds 2
            }
          }
          if(-Not $done){
            exit 1
          }
      - name: Checkout phpbc
        uses: actions/checkout@v2
        with:
          repository: dixyes/phpbc
          path: phpbc
          ref: ${{ github.event.inputs && github.event.inputs.phpbc_ref || 'master' }}
      - name: Test use actions
        uses: ./phpbc/action
        with:
          # see https://github.com/swow/swow/discussions/68
          skip: sapi/phpdbg.*,Zend/tests/arginfo_zpp_mismatch.*
          #skip: sapi/.*,Zend/.*,ext/.*
          ctrl_binary: ${{ env.tools_path }}\php\php.exe
          expr_binary: ${{ env.tools_path }}\php\php.exe
          expr_args: -d extension=swow
          ctrl_env: MYSQL_TEST_HOST=localhost:3406,MYSQL_TEST_PORT=3406,PDO_MYSQL_TEST_DSN=mysql:host=127.0.0.1;port=3406;dbname=test,PDO_MYSQL_TEST_USER=root
          expr_env: MYSQL_TEST_HOST=localhost:3506,MYSQL_TEST_PORT=3506,PDO_MYSQL_TEST_DSN=mysql:host=127.0.0.1;port=3506;dbname=test,PDO_MYSQL_TEST_USER=root
      - name: Prepare artifact
        shell: bash
        id: prepareartifact
        run: |
          swow_ref="${{ needs.get-swowref.outputs.refhash }}"
          swow_ref_tail=${swow_ref##??}
          swow_ref_head=${swow_ref%%${swow_ref_tail}}
          echo "::set-output name=key::${swow_ref}-${{ matrix.phpver }}-${{ matrix.ts == '1' && 'ts' || 'nts' }}"
          mkdir report
          cd report
          mkdir -p ${{runner.os}}/${swow_ref_head}/${swow_ref_tail}
          cp ../phpbc_results.json ${{runner.os}}/${swow_ref_head}/${swow_ref_tail}/PHP${{ matrix.phpver }}_${{ matrix.ts == '1' && 'ts' || 'nts' }}.json
          cp ../phpbc_results.md ${{runner.os}}/${swow_ref_head}/${swow_ref_tail}/PHP${{ matrix.phpver }}_${{ matrix.ts == '1' && 'ts' || 'nts' }}.md
          cp ../phpbc_results.md ${{runner.os}}_PHP${{ matrix.phpver }}_${{ matrix.ts == '1' && 'ts' || 'nts' }}_latest.md

      - name: 'Upload test result'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.get-swowref.outputs.refhash }}
          path: report/**
          retention-days: 1
  report:
    needs:
      - get-swowref
      - unix-test
      - win-test
    if: needs.get-swowref.outputs.ok == 'yes'
    name: Upload bc reports
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout self
        uses: actions/checkout@v2
        with:
          path: report
          ref: latest
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ needs.get-swowref.outputs.refhash }}
          path: report
      - name: Create report
        shell: bash
        run: |
          cd report
          git config user.name "dixyes-bot"
          git config user.email "me@dixy.es"
          git add .
          git commit -m "Update result for swow/swow@${{ needs.get-swowref.outputs.refhash }}"
          git push
